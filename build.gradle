buildscript {
    dependencies {
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    }
}
plugins {
    id "groovy"
    id "checkstyle"
    id "codenarc"
    id "idea"
    id "maven"
    id "com.gradle.plugin-publish" version "0.9.7"
}

repositories {
    jcenter()
}

def compileAvroVersion = "1.8.1"

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "org.apache.avro:avro-compiler:${compileAvroVersion}"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude module: "groovy-all"
    }
    testCompile gradleTestKit()
}

tasks.withType(AbstractCompile) {
    options.encoding = "UTF-8"
}
sourceCompatibility = 1.6

version = "0.99.99-SNAPSHOT"
group = "com.commercehub.gradle.plugin"

pluginBundle {
    website = "https://github.com/davidmc24/gradle-avro-plugin"
    vcsUrl = "https://github.com/davidmc24/gradle-avro-plugin"
    description = "A Gradle plugin to allow easily performing Java code generation for Apache Avro. Versions published to the Gradle Plugin Portal are obsolete.  For up-to-date versions, please see https://github.com/davidmc24/gradle-avro-plugin"
    tags = ["serialization", "avro"]
    plugins {
        avro {
            id = "com.commercehub.gradle.plugin.avro"
            displayName = "Avro Plugin"
        }
        avroBase {
            id = "com.commercehub.gradle.plugin.avro-base"
            displayName = "Avro Base Plugin"
        }
    }
    mavenCoordinates {
        groupId = "com.commercehub.gradle.plugin"
        artifactId = "gradle-avro-plugin"
    }
}

idea {
    project {
        vcs = "Git"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parseText("""
                <component name="ProjectCodeStyleSettingsManager">
                    <option name="PER_PROJECT_SETTINGS">
                        <value>
                            <option name="LINE_SEPARATOR" value="&#10;"/>
                            <option name="RIGHT_MARGIN" value="140"/>
                        </value>
                    </option>
                    <option name="USE_PER_PROJECT_SETTINGS" value="true"/>
                </component>
                """.stripIndent()))
            }
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

checkstyle {
    toolVersion = "6.1.1" // Last version of checkstyle to support Java 6
}
// Nasty workaround for https://issues.gradle.org/browse/GRADLE-2888
def checkstyleWarningsFile = "build/reports/checkstyle/main.xml"
checkstyleMain.doLast {
    File warningsFile = file(checkstyleWarningsFile)
    if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check ${warningsFile}")
    }
}

codenarc {
    toolVersion = "1.0"
    config = project.resources.text.fromFile("config/codenarc/codenarc.groovy")
}

tasks.create("testVersionCompatibility") {
    description = "Tests cross-compatibility of the plugin with different versions of Avro and Gradle"
}

tasks.create("testRecentVersionCompatibility") {
    description = "Tests cross-compatibility of the plugin with recent versions of Avro and Gradle"
}

test {
    systemProperties = [
        avroVersion: compileAvroVersion,
        gradleVersion: gradle.gradleVersion,
    ]
}

def avroVersions = ["1.8.0", "1.8.1"]
def gradleVersions = ["2.0", "2.1", "2.2", "2.3", "2.4", "2.5", "2.6", "2.7", "2.8", "2.9", "2.10", "2.11", "2.12", "2.13", "2.14", "2.14.1"]

if (org.gradle.api.JavaVersion.current().isJava7Compatible()) {
    gradleVersions.addAll("3.0", "3.1", "3.2", "3.2.1", "3.3", "3.4", "3.4.1", "3.5", "3.5.1", "4.0", "4.0.1", "4.0.2", "4.1")
}

avroVersions.each { def avroVersion ->
    gradleVersions.each { def gradleVersion ->
        def newTask = tasks.create(name: "testAvro${avroVersion}Gradle${gradleVersion}", type: Test) {
            description = "Test cross-compatibility of the plugin with Avro ${avroVersion} and Gradle ${gradleVersion}"
            systemProperties = [
                avroVersion: avroVersion,
                gradleVersion: gradleVersion,
            ]
            reports {
                html.destination = file("$buildDir/reports/tests-${avroVersion}-${gradleVersion}")
                junitXml.destination = file("$buildDir/reports/tests-${avroVersion}-${gradleVersion}")
            }
        }
        testVersionCompatibility.dependsOn newTask
        if (gradleVersions.indexOf(gradleVersion) >= gradleVersions.size() - 5) {
            testRecentVersionCompatibility.dependsOn newTask
        }
    }
}

tasks.withType(Test) {
    jvmArgs "-Xss320k"
    minHeapSize "120m"
    maxHeapSize "280m"
}

if (org.gradle.api.JavaVersion.current().isJava7Compatible()) {
    apply plugin: "com.github.hierynomus.license"
    license {
        header = file("gradle/DEFAULT_LICENSE_NOTICE")
        skipExistingHeaders = true
        mapping("avdl", "JAVADOC_STYLE")
        excludes(["**/*.avsc", "**/*.avpr"]) // JSON doesn't allow comments
        exclude("**/record.vm") // Existing header in different style
        // dryRun = true
    }
}
